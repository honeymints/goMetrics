// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: buses.proto

package buses

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusService_RequestBus_FullMethodName = "/protos.BusService/RequestBus"
)

// BusServiceClient is the client API for BusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusServiceClient interface {
	RequestBus(ctx context.Context, in *BusRequest, opts ...grpc.CallOption) (BusService_RequestBusClient, error)
}

type busServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusServiceClient(cc grpc.ClientConnInterface) BusServiceClient {
	return &busServiceClient{cc}
}

func (c *busServiceClient) RequestBus(ctx context.Context, in *BusRequest, opts ...grpc.CallOption) (BusService_RequestBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &BusService_ServiceDesc.Streams[0], BusService_RequestBus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &busServiceRequestBusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BusService_RequestBusClient interface {
	Recv() (*BusResponse, error)
	grpc.ClientStream
}

type busServiceRequestBusClient struct {
	grpc.ClientStream
}

func (x *busServiceRequestBusClient) Recv() (*BusResponse, error) {
	m := new(BusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BusServiceServer is the server API for BusService service.
// All implementations must embed UnimplementedBusServiceServer
// for forward compatibility
type BusServiceServer interface {
	RequestBus(*BusRequest, BusService_RequestBusServer) error
	mustEmbedUnimplementedBusServiceServer()
}

// UnimplementedBusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusServiceServer struct {
}

func (UnimplementedBusServiceServer) RequestBus(*BusRequest, BusService_RequestBusServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestBus not implemented")
}
func (UnimplementedBusServiceServer) mustEmbedUnimplementedBusServiceServer() {}

// UnsafeBusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusServiceServer will
// result in compilation errors.
type UnsafeBusServiceServer interface {
	mustEmbedUnimplementedBusServiceServer()
}

func RegisterBusServiceServer(s grpc.ServiceRegistrar, srv BusServiceServer) {
	s.RegisterService(&BusService_ServiceDesc, srv)
}

func _BusService_RequestBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusServiceServer).RequestBus(m, &busServiceRequestBusServer{stream})
}

type BusService_RequestBusServer interface {
	Send(*BusResponse) error
	grpc.ServerStream
}

type busServiceRequestBusServer struct {
	grpc.ServerStream
}

func (x *busServiceRequestBusServer) Send(m *BusResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BusService_ServiceDesc is the grpc.ServiceDesc for BusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.BusService",
	HandlerType: (*BusServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestBus",
			Handler:       _BusService_RequestBus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "buses.proto",
}
