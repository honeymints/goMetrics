// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: metrics.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsService_RequestTemp_FullMethodName = "/protos.MetricsService/RequestTemp"
	MetricsService_RequestPol_FullMethodName  = "/protos.MetricsService/RequestPol"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	RequestTemp(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (MetricsService_RequestTempClient, error)
	RequestPol(ctx context.Context, in *PollutionRequest, opts ...grpc.CallOption) (MetricsService_RequestPolClient, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) RequestTemp(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (MetricsService_RequestTempClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[0], MetricsService_RequestTemp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsServiceRequestTempClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricsService_RequestTempClient interface {
	Recv() (*TemperatureResponse, error)
	grpc.ClientStream
}

type metricsServiceRequestTempClient struct {
	grpc.ClientStream
}

func (x *metricsServiceRequestTempClient) Recv() (*TemperatureResponse, error) {
	m := new(TemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricsServiceClient) RequestPol(ctx context.Context, in *PollutionRequest, opts ...grpc.CallOption) (MetricsService_RequestPolClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[1], MetricsService_RequestPol_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsServiceRequestPolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricsService_RequestPolClient interface {
	Recv() (*PollutionResponse, error)
	grpc.ClientStream
}

type metricsServiceRequestPolClient struct {
	grpc.ClientStream
}

func (x *metricsServiceRequestPolClient) Recv() (*PollutionResponse, error) {
	m := new(PollutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	RequestTemp(*TemperatureRequest, MetricsService_RequestTempServer) error
	RequestPol(*PollutionRequest, MetricsService_RequestPolServer) error
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) RequestTemp(*TemperatureRequest, MetricsService_RequestTempServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestTemp not implemented")
}
func (UnimplementedMetricsServiceServer) RequestPol(*PollutionRequest, MetricsService_RequestPolServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestPol not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_RequestTemp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServiceServer).RequestTemp(m, &metricsServiceRequestTempServer{stream})
}

type MetricsService_RequestTempServer interface {
	Send(*TemperatureResponse) error
	grpc.ServerStream
}

type metricsServiceRequestTempServer struct {
	grpc.ServerStream
}

func (x *metricsServiceRequestTempServer) Send(m *TemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MetricsService_RequestPol_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PollutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServiceServer).RequestPol(m, &metricsServiceRequestPolServer{stream})
}

type MetricsService_RequestPolServer interface {
	Send(*PollutionResponse) error
	grpc.ServerStream
}

type metricsServiceRequestPolServer struct {
	grpc.ServerStream
}

func (x *metricsServiceRequestPolServer) Send(m *PollutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestTemp",
			Handler:       _MetricsService_RequestTemp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestPol",
			Handler:       _MetricsService_RequestPol_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metrics.proto",
}
